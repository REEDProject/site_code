image: alpine

.prepare:ssh:
  before_script:
    # Option 1: Force openssh reinstall
    - apk update
    - apk del openssh openssl || true
    - apk add --no-cache openssl openssh
    
    # Start SSH agent
    - eval $(ssh-agent -s)

    # Set up SSH key
    - chmod 400 "${SSH_PRIVATE_KEY}"
    - ssh-add "${SSH_PRIVATE_KEY}"

    # Create and configure SSH directory
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # Set up known hosts
    - cp "${SSH_KNOWN_HOSTS}" ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

.git:pull:
  script:
    - >
      ssh ${SSH_USER}@${HOST}
      "
        cd ${DEPLOY_DIR} || git clone ${CI_REPOSITORY_URL} ${DEPLOY_DIR} &&
        cd ${DEPLOY_DIR} &&
        git config core.fileMode false &&
        git remote remove origin || true &&
        git remote add origin ${CI_REPOSITORY_URL} &&
        git fetch --all &&
        git checkout ${CI_COMMIT_BRANCH:-main} &&
        git pull origin ${CI_COMMIT_BRANCH:-main} &&
        git remote remove origin
      "

.prepare:env:
  script:
    - >
      ssh ${SSH_USER}@${HOST}
      "
        cd ${DEPLOY_DIR} &&
        echo ${INSTANCE_ENV} | base64 -d > .env &&
        echo 'CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}' >> .env &&
        mkdir -p volumes/traefik &&
        echo ${HTPASSWD} | base64 -d > volumes/traefik/.htpasswd
      "

.compose:up:
  script:
    - >
      ssh ${SSH_USER}@${HOST}
      "
        cd ${DEPLOY_DIR} &&
        INSTANCE=${DEPLOY_INSTANCE} \
        docker compose up -d --build --no-deps --force-recreate --remove-orphans
      "

stages:
  - deploy

deploy_to_dev:
  stage: deploy
  before_script:
    - DEPLOY_DIR=/project/dev
    - DEPLOY_INSTANCE=dev
    - INSTANCE_ENV=${HOST_ENV_DEV}
    - !reference [.prepare:ssh, before_script]
  script:
    - !reference [.git:pull, script]
    - !reference [.prepare:env, script]
    - !reference [.compose:up, script]

  rules:
    - if: $CI_COMMIT_BRANCH == "master"

deploy_to_prod:
  stage: deploy
  before_script:
    - DEPLOY_DIR=/project/prod
    - DEPLOY_INSTANCE=prod
    - INSTANCE_ENV=${HOST_ENV_PROD}
    - !reference [.prepare:ssh, before_script]
  script:
    - !reference [.git:pull, script]
    - !reference [.prepare:env, script]
    - !reference [.compose:up, script]

  rules:
    - if: $CI_COMMIT_BRANCH == "release"
